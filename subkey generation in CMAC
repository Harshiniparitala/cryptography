#include <stdio.h>
#include <stdint.h>
#define BLOCK_SIZE 16

void left_shift(uint8_t *in, uint8_t *out) {
    uint8_t carry = 0;
    for (int i = BLOCK_SIZE - 1; i >= 0; i--) {
        uint8_t next_carry = (in[i] & 0x80) ? 1 : 0;
        out[i] = (in[i] << 1) | carry;
        carry = next_carry;
    }
}

void xor_rb(uint8_t *in) {
    in[BLOCK_SIZE - 1] ^= 0x87; // Constant for 128-bit blocks
}

int main() {
    uint8_t L[BLOCK_SIZE] = {0x00}; // Normally L = AES_encrypt(0^128)
    L[BLOCK_SIZE - 1] = 0x80; // example
    uint8_t K1[BLOCK_SIZE], K2[BLOCK_SIZE];

    left_shift(L, K1);
    if (L[0] & 0x80) xor_rb(K1);

    left_shift(K1, K2);
    if (K1[0] & 0x80) xor_rb(K2);

    printf("K1: "); for(int i=0;i<BLOCK_SIZE;i++) printf("%02X ", K1[i]); printf("\n");
    printf("K2: "); for(int i=0;i<BLOCK_SIZE;i++) printf("%02X ", K2[i]); printf("\n");

    return 0;
}
